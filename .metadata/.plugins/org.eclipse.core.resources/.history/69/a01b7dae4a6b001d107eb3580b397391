package server;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Iterator;

import javax.swing.JOptionPane;

import client.TCPClient;
import core.FileInfo;
import core.ListMessChat;
import core.MessInfo;
import core.Service;
import core.UserInfo;
import event.EventChat;
import event.EventExitOrLogout;
import event.EventServer;
import event.PublicEvent;
import guiCore.HomeChatServer;
import guiCore.HomeClient;
import guiCore.Item_People;

public class Controller implements ActionListener {
	private ServerGuiView view;
	private int port = 9900;
	private TCPServer tcpServer;
	private ArrayList<UserInfo> arrayListUserDatabaseToGUI;
	private SubChatClientView viewSub;
	private boolean isSendFile = false;

	public void actionPerformed(ActionEvent e) {

	}

	public Controller(ServerGuiView view) {

		this.view = view;
		tcpServer = new TCPServer(port, view.getTextAreaResult(), view);
		tcpServer.open();
		tcpServer.start();
		arrayListUserDatabaseToGUI = new ArrayList<UserInfo>();
		this.viewSub = new SubChatClientView();
		this.viewSub.setVisible(false);

		// getuser tu database va ve lai bang
		arrayListUserDatabaseToGUI = tcpServer.getService().getListUser();
		view.UpdateUserLoginInSystem(arrayListUserDatabaseToGUI, tcpServer.getArrayListUser());

		PublicEvent.getInstance().addeventServer(new EventServer() {

			@Override
			public void UpdateUser(String username, int option) {
				// TODO Auto-generated method stub

			}

			@Override
			public void Adduser(String username, String Password) {
				// TODO Auto-generated method stub
				System.out.println("User In system " + tcpServer.getArrayListUser().toString());
			}

			@Override
			public void SelectTableUser(String username, String status) {
				// TODO Auto-generated method stub
				for (UserInfo userInfo : arrayListUserDatabaseToGUI) {
					if (username.equals(userInfo.getUsername())) {
						view.getTxtUsername().setText(username);
						view.getTxtComboBoxStatus().setSelectedIndex(userInfo.getStatus());
						break;
					}
				}

			}

			@Override
			public void UpdateStatusUserLoginInSystem(ArrayList<UserInfo> userInfoInSystem) {
				view.UpdateUserLoginInSystem(arrayListUserDatabaseToGUI, userInfoInSystem);
			}

			@Override
			public void KickUser(String username, String statusInSytem) {
				// TODO Auto-generated method stub
				for (UserInfo userInfo : tcpServer.getArrayListUser()) {
					if (username.equals(userInfo.getUsername())) {
						try {
							userInfo.getSocket().close();
							tcpServer.getArrayListUser().remove(tcpServer.getArrayListUser().indexOf(userInfo));
							view.UpdateUserLoginInSystem(arrayListUserDatabaseToGUI, tcpServer.getArrayListUser());
						} catch (IOException e) {
							// TODO Auto-generated catch block
							System.out.println("kick user");
						}
					}
				}
			}

			@Override
			public void ChatWithServer() {
				// SHOW US SOME MESSAGE
				viewSub.setVisible(true);
				viewSub.getHome().getChat().getChatBody().clearChat();
				paintMessServerWhenClick(tcpServer.getService().getMessInfoOfServer(view.getTxtUsername().getText()));
//				JOptionPane.showMessageDialog(view.getContentPane(), view.getTxtUsername().getText() + " Clicked");
			}

		});
		PublicEvent.getInstance().addEventChat(new EventChat() {
			@Override
			public void sendMessage(String text) {
				DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
				LocalDateTime now = LocalDateTime.now();
				String time = dtf.format(now);
				try {
					for (UserInfo userInfo : tcpServer.getArrayListUser()) {

						if (userInfo.getUsername().equals(view.getTxtUsername().getText())) {

							MessInfo messInfo = new MessInfo("admin", view.getTxtUsername().getText(), text, time,
									null);
							ObjectOutputStream oos = new ObjectOutputStream(userInfo.getSocket().getOutputStream());
							tcpServer.sendMess(oos, messInfo);
							oos = null;

						}

					}
					tcpServer.getService().insertMessInfo("admin", view.getTxtUsername().getText(), text, time, null);
				} catch (Exception e) {
					// TODO: handle exception
				}
			}

			@Override
			public void sendFile() {
				String path = viewSub.chooseFile();
				isSendFile = true;
				viewSub.getHome().getChat().getChatBottom().getTxt().setText(path);
			}

			@Override
			public void newMessage(String text) {
				// TODO Auto-generated method stub

			}

			@Override
			public void downloadFile(FileInfo fileInfo) {
				// TODO Auto-generated method stub

			}
		});
		PublicEvent.getInstance().addeventExitOrLogout(new EventExitOrLogout() {

			@Override
			public void sendLogoutToServer() {
				// TODO Auto-generated method stub

			}

			@Override
			public void sendExitToServer() {
				viewSub.setVisible(false);

			}
		});
	}

	private void paintMessServerWhenClick(ArrayList<MessInfo> listMessInfo) {
		// TODO Auto-generated method stub
		try {
			for (MessInfo messInfo : arrayMessInfos) {

				// check xem da co user trong list mess chat ch∆∞a
				boolean isUserTrue = false;
				Item_People item_People = null;

				// neu nguoi nhan va username giong nhau se lay nguoi gui
				if (messInfo.getUserDes().equals(this.username)) {
					item_People = new Item_People(messInfo.getUserSource());
				} else {
					item_People = new Item_People(messInfo.getUserDes());
				}

				item_People.addMouseListener(new MouseAdapter() {
					@Override
					public void mouseClicked(MouseEvent e) {
						// check and ve lai body chat khi click
						body.clearChat();

						if (messInfo.getUserDes().equals(username)) {

							for (ListMessChat listMessChat : listUserChat) {

								System.out.println("tcpclient: listmesschat " + listMessChat.getUsername());

								if (listMessChat.getUsername().equals(messInfo.getUserSource())) {

									ListMessChat listMess = listUserChat.get(listUserChat.indexOf(listMessChat));

									for (MessInfo mess : listMess.getListMessInfo()) {
										if (username.equals(mess.getUserSource())) {
											body.addItemRight(mess.getMessContent(), mess.getTime(), mess);
										} else {
											body.addItemLeft(mess.getMessContent(), mess.getTime(), mess);
										}
									}

									break;
								}
							}

						} else {

							for (ListMessChat listMessChat : listUserChat) {

								System.out.println("tcpclient: listmesschat " + listMessChat.getUsername());

								if (listMessChat.getUsername().equals(messInfo.getUserDes())) {

									ListMessChat listMess = listUserChat.get(listUserChat.indexOf(listMessChat));

									for (MessInfo mess : listMess.getListMessInfo()) {
										if (username.equals(mess.getUserSource())) {
											body.addItemRight(mess.getMessContent(), mess.getTime(), mess);
										} else {
											body.addItemLeft(mess.getMessContent(), mess.getTime(), mess);
										}
									}

									break;
								}
							}
						}

						body.revalidate();

					}
				});
			}
		} catch (Exception e) {
			// TODO: handle exception
		}
	}
}
